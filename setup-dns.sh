#!/bin/bash

# DNS Setup Script for Network-Wide Subdomain Resolution
# Run with: sudo ./setup-dns.sh

set -e

echo "🌐 Setting up DNS for network-wide subdomain resolution..."
echo "============================================================"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "❌ This script must be run with sudo"
    echo "Usage: sudo ./setup-dns.sh"
    exit 1
fi

# Get the server's IP address automatically
SERVER_IP=$(hostname -I | awk '{print $1}')
echo "🔍 Detected server IP: $SERVER_IP"

# Confirm with user
read -p "Is this IP correct? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    read -p "Enter the correct IP address: " SERVER_IP
    echo "Using IP: $SERVER_IP"
fi

# Install dnsmasq
echo "📦 Installing dnsmasq..."
apt update -qq
apt install -y dnsmasq

# Backup original configuration
if [ -f /etc/dnsmasq.conf ]; then
    echo "💾 Backing up original dnsmasq.conf..."
    cp /etc/dnsmasq.conf /etc/dnsmasq.conf.backup.$(date +%Y%m%d_%H%M%S)
fi

# Create new dnsmasq configuration
echo "⚙️  Creating dnsmasq configuration..."
cat > /etc/dnsmasq.conf << EOF
# DNS Configuration for IoT Services
# Generated by setup-dns.sh on $(date)

# Basic DNS settings
port=53
domain-needed
bogus-priv
expand-hosts
domain=local

# Don't read /etc/hosts
no-hosts

# Subdomain mappings for IoT services
address=/iot.matilda.local/$SERVER_IP
address=/weather.matilda.local/$SERVER_IP
address=/hubitat.matilda.local/$SERVER_IP
address=/govee.matilda.local/$SERVER_IP
address=/database.matilda.local/$SERVER_IP

# Keep the main hostname working
address=/matilda.local/$SERVER_IP

# Forward other DNS queries to router/ISP DNS
server=8.8.8.8
server=8.8.4.4

# Listen on all interfaces
listen-address=127.0.0.1
listen-address=$SERVER_IP

# Cache settings
cache-size=1000

# Log queries for debugging (comment out in production)
log-queries
EOF

# Stop systemd-resolved if it's using port 53
if systemctl is-active --quiet systemd-resolved; then
    echo "🔧 Configuring systemd-resolved to not conflict with dnsmasq..."
    
    # Configure systemd-resolved to use different port
    mkdir -p /etc/systemd/resolved.conf.d/
    cat > /etc/systemd/resolved.conf.d/dnsmasq.conf << EOF
[Resolve]
DNS=127.0.0.1
DNSStubListener=no
EOF
    
    systemctl restart systemd-resolved
fi

# Start and enable dnsmasq
echo "🚀 Starting dnsmasq service..."
systemctl restart dnsmasq
systemctl enable dnsmasq

# Test the DNS server
echo "🧪 Testing DNS resolution..."
sleep 2

if nslookup iot.matilda.local 127.0.0.1 > /dev/null 2>&1; then
    echo "✅ DNS server is working!"
else
    echo "⚠️  DNS test failed - checking logs..."
    systemctl status dnsmasq --no-pager -l
fi

# Display configuration summary
echo ""
echo "🎉 DNS Setup Complete!"
echo "======================"
echo ""
echo "📍 Your server is now a DNS server for the network"
echo "🌐 Server IP: $SERVER_IP"
echo ""
echo "✅ These subdomains now resolve network-wide:"
echo "   • http://iot.matilda.local/"
echo "   • http://weather.matilda.local/"
echo "   • http://hubitat.matilda.local/"
echo "   • http://govee.matilda.local/"
echo "   • http://database.matilda.local/"
echo ""
echo "📋 Next steps:"
echo "1. Configure devices on your network to use $SERVER_IP as DNS server"
echo "2. OR configure your router to use $SERVER_IP as DNS server"
echo "3. Test from another device: ping iot.matilda.local"
echo ""
echo "🔧 Troubleshooting:"
echo "   • Check status: systemctl status dnsmasq"
echo "   • View logs: journalctl -u dnsmasq -f"
echo "   • Test locally: nslookup iot.matilda.local 127.0.0.1"
echo ""
echo "⚙️  Configuration file: /etc/dnsmasq.conf"
echo "💾 Backup saved: /etc/dnsmasq.conf.backup.*"